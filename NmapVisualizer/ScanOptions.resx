<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="toolTip1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <data name="txtTargets.ToolTip" xml:space="preserve">
    <value>Sometimes you wish to scan a whole network of adjacent hosts. For this,
Nmap supports CIDR-style.  addressing. You can append /numbits to an
IPv4 address or hostname and Nmap will scan every IP address for which
the first numbits are the same as for the reference IP or hostname
given. For example, 192.168.10.0/24 would scan the 256 hosts between
192.168.10.0 (binary: 11000000 10101000 00001010 00000000) and
192.168.10.255 (binary: 11000000 10101000 00001010 11111111),
inclusive.  192.168.10.40/24 would scan exactly the same targets. Given
that the host scanme.nmap.org.  is at the IP address 64.13.134.52, the
specification scanme.nmap.org/16 would scan the 65,536 IP addresses
between 64.13.0.0 and 64.13.255.255. The smallest allowed value is /0,
which targets the whole Internet. The largest value is /32, which scans
just the named host or IP address because all address bits are fixed.</value>
  </data>
  <data name="txtPorts.ToolTip" xml:space="preserve">
    <value>This option specifies which ports you want to scan and overrides
the default. Individual port numbers are OK, as are ranges
separated by a hyphen (e.g.  1-1023). The beginning and/or end
values of a range may be omitted, causing Nmap to use 1 and 65535,
respectively. So you can specify -p- to scan ports from 1 through
65535. Scanning port zero.  is allowed if you specify it
explicitly. For IP protocol scanning (-sO), this option specifies
the protocol numbers you wish to scan for (0–255).

When scanning both TCP and UDP ports, you can specify a particular
protocol by preceding the port numbers by T: or U:. The qualifier
lasts until you specify another qualifier. For example, the
argument -p U:53,111,137,T:21-25,80,139,8080 would scan UDP ports
53, 111,and 137, as well as the listed TCP ports. Note that to scan
both UDP and TCP, you have to specify -sU and at least one TCP scan
type (such as -sS, -sF, or -sT). If no protocol qualifier is given,
the port numbers are added to all protocol lists.</value>
  </data>
  <data name="checkBox1.ToolTip" xml:space="preserve">
    <value>While most popular services on the Internet run over the TCP
protocol, UDP[6] services are widely deployed. DNS, SNMP, and DHCP
(registered ports 53, 161/162, and 67/68) are three of the most
common.</value>
  </data>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEBAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///wAAAAAAk35YD82y
        dEbPtHRizLFwZcuxcGXQtXZaz7d7OQAAAAEAAAAA3cGEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANzBgwAAAAAAzbN4UNW7
        fNXky4v/6tKU/+3Wmf/v2Jz/79eb/+zVl//nz5D/4ciJ/9S5esHRuYE6AAAAANa0cAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAOjNkgAAAAAAw6x5K8+1
        d9Pm0Jb/+ea0//PfrP/s16D/59GY/+XPlv/mz5b/6NKZ/+/apP/347H/9+Sw/9/Hi//Qt3vAwq18GwAA
        AACIc00AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQEAAAAAAAAAAAAAt55qJs20
        fLXgypX/79yt/+LMmP/l0aD/6Nev/+PSrf/p27v/6t2//+vev//o2rr/4dGq/+bUqv/kz5z/59Kg/+7c
        rP/cxY//y7N7oKiSYxEAAAAA//24AAEBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC0n3kXvaVtZs+5
        hc3fy5r/5dOl/9/LnP/n17D/9+zT//Xr1P/m2bz/7uPJ/+zhx//q3sL/7ODF/+zhx//t4cj/5di8//fv
        2f/z5sr/5NOq/+HNnf/m06b/3cmY/8qzfrO8omtSXFA0CQAAAAAAAAAA2sOOANjGn07Qu43G1L+R+9O8
        i//hzqT/49Go/+TTr//y5sz//ffm//v04//68uD/5trB/+/lz//p3sX/4tW4/+LVt//g07T/49a5/+rf
        x//u5c//5trB//v04v/89eP//PXj/+3gw//j0ar/4tCn/+DNo//ZxJX/076R7sy3h6/Qv5gq2cef++bX
        tf/TwZj/49Gx/+jYuf/9+ev/+/bo//v25//79uf/+/bo/+3l0v/t5dL/6uHN/+DUuv/Sxav/opaA/52Q
        eP/Vya7/4da8/+zj0P/s49D/8OjW//v25//79uf/+/bn//z36f/9+Ov/3cmk/+HQr//SvpP/6dy7/9jG
        n+7YyKTF7+XL/+/kyv/ez67/6Nu///z25v/79eT/+/Xk//v15P/89ub/5tzG/+3k0f/k28P/4NS3/4R2
        Xv+VinX/jYFr/4p9ZP/h1Lf/593G/+zj0P/o38r/+/Xl//v15P/79eT/+/Xk//z35//j1LP/4dOz//Dm
        zf/t4sj/1MOdsMS0khTazKr38enU//Ls1//o38X/4dS1//jx2v/38dr/9/Ha//nz3f/h1rj/7OPJ/+HV
        tP/ZzKz/jYFo/7Cnkf+onYb/iHxh/9/Ssv/j17j/6uDG/+Xavf/48tz/9/Ha//fx2v/48dv/4tW3/+rh
        yP/y69b/7eTM/9bHpN+KeWUD//LGALSlhg3LuY/U7OPL//bw3f/y7Nb/4dS0/+rdu//37c//9u3P/+PV
        sP/o3Ln/4dOr/9vLnv+RgWH/kINm/4d5Wv+aimn/2sqc/+LVrv/o27j/5dm0//btzv/37c//6t28/+DT
        s//x69X/9vHf/+PYu//OvZazAAAAAMa2lAAAAAAAwbCMAAAAAADItYyA39Gy//Ps1//z7Nn/7OPL/9/R
        rP/y5r3/6Nmt/+XWqP/k1qf/2ciS/9fFj/+4pnz/tKJ0/+HTqv/dzJf/5dep/+PUpf/r3bH/8eW8/97Q
        qv/s48z/8+3Z//Hr1f/Zy6n/ybeQYgAAAACjkW0AAAAAAAAAAAAAAAAAAQEBAAAAAADBrYYm1MSf5Ozj
        y//07tr/8+3Z/+PYu//ez6H/3MqM/+TUmv/h0JT/2seG/9jEgf/i06P/7OLA/+TVn//k05n/28iL/+DQ
        o//j2Lv/9O7a//Tu2//o3sP/08Ke1r6tjBkAAAAAAQEBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMu0
        ggAAAAAAybaPgN3QsP/x6tX/8erU//bx3//s5Mz/4dOp/93Nlv/ayIv/1sOD/9fEgv/ZyIn/386b/+TW
        sf/v6dP/9O7b//Pu2f/u5s//2Mmn/828l2oAAAAA2sOTAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAEBAQAAAAAAtqWDEsm3j6zazKr/+PPi//r25f/69eX/+/fn//v36P/7+On//Pjp//v3
        6P/69ub/+vXk//v35//w6NP/1cWg/828loorIiADAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/5KsAAAAAAKaRZRfKuZKN2cyr6ubbwP/s48v/8erU//Lr
        1v/z7Nj/8enU/+viyf/i17r/08Shy8u6lWgAAAAAAAAAADguIQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAjn5gD8Sz
        jj3Fs4xXxLSOY8KxjGXGtpFaxbWSNgAAAAAAAAAAAAAAAAEBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA/////////////////////////////////////////////////+AH//+A
        Af/+AAB/+AAAH4AAAAEAAAAAAAAAAIAAAAHAAAAD4AAAD/gAAB/8AAB//wAA///AB///////////////
        //////////////////////////////////8=
</value>
  </data>
</root>